// Test that a socket PSP-RX state can receive both
// cleartext and psp-encapsulated packets.

--ip_version=ipv6
--psp_udp_port=1000

// Initialize connection
0.000 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
   +0 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
   +0 bind(3, ..., ...) = 0
   +0 listen(3, 1) = 0

   +.1 < S 0:0(0) win 50000 <mss 1000,nop,wscale 0>
   +0 > S. 0:0(0) ack 1 <mss 1440,nop,wscale 11>
   +0 < . 1:1(0) ack 1 win 50000
   +0 accept(3, ..., ...) = 4

// PSP-RX state
+0 nl_rx_spi_alloc(4, [7]) = 0

// cleartext tcp both tx and rx
+0 send(4, ..., 500, 0) = 500
+0 > P. 1:501(500) ack 1
+0 <  . 1:1(0) ack 501 win 50000

+0.1 < P. 1:501(500) ack 501 win 50000
  +0 >  . 501:501(0) ack 501
  +0 recv(4, ..., 1000, 0) = 500

// now rx traffic is psp, but tx is still cleartext
+0 send(4, ..., 500, 0) = 500
+0 > P. 501:1001(500) ack 501
+0 < encap psp spi 7 . 501:501(0) ack 1001 win 50000

+0.1 < encap psp spi 7 P. 501:1001(500) ack 1001 win 50000
+0.04 > . 1001:1001(0) ack 1001
+0 recv(4, ..., 1000, 0) = 500

+0 nl_tx_spi_set(4, 23) = 0

// both rx and tx are psp
+0 send(4, ..., 500, 0) = 500
+0 > encap psp spi 23 P. 1001:1501(500) ack 1001
+0 < encap psp spi 7 . 1001:1001(0) ack 1501 win 50000

+0.1 < encap psp spi 7 P. 1001:1501(500) ack 1501 win 50000
+0 > encap psp spi 23 . 1501:1501(0) ack 1501
+0 recv(4, ..., 1000, 0) = 500

// PSP encapsulated FIN handshake
  +.1 close(4) = 0
   +0 > encap psp spi 23 F. 1501:1501(0) ack 1501
  +.1 < encap psp spi 7 F. 1501:1501(0) ack 1502 win 50000
+.001 > encap psp spi 23 . 1502:1502(0) ack 1502
